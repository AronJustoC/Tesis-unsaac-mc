import numpy as np

# Definir propiedades del material y geometría
E = 210e9  # Módulo de elasticidad (Pa)
G = 80e9   # Módulo de corte (Pa)
A = 0.01   # Área de la sección transversal (m^2)
Iyy = 1e-6 # Momento de inercia en y (m^4)
Izz = 1e-6 # Momento de inercia en z (m^4)
J = 1e-6   # Constante torsional (m^4)

# Definir coordenadas de los nodos y elementos (mantener los arrays existentes) 
nodos = np.array([
  [0, 0, 0],
  [0, 0, 1100], 
  [0, 0, 2200],
  [762.5, 0, 0],
  [762.5, 0, 2200],
  [1525, 0, 0],
  [1525, 0, 1100],
  [1525, 0, 2200],
  [2287.5, 0, 0], 
  [2287.5, 0, 2200],
  [3050, 0, 0],
  [3050, 0, 1100],
  [3050, 0, 2200],
  [3812.5, 0, 0],
  [3812.5, 0, 2200],
  [4575, 0, 0],
  [4575, 0, 1100],
  [4575, 0, 2200],
  [5337.5, 0, 0],
  [5337.5, 0, 2200],
  [6100, 0, 0],
  [6100, 0, 1100],
  [6100, 0, 2200],
  [6862.5, 0, 0],
  [6862.5, 0, 2200],
  [7625, 0, 0],
  [7625, 0, 1100],
  [7625, 0, 2200],
  [8387.5, 0, 0],
  [8387.5, 0, 2200],
  [9150, 0, 0],
  [9150, 0, 1100],
  [9150, 0, 2200],
  [9912.5, 0, 0],
  [9912.5, 0, 2200],
  [10675, 0, 0],
  [10675, 0, 1100],
  [10675, 0, 2200],
  [11437.5, 0, 0],
  [11437.5, 0, 2200],
  [12200, 0, 0],
  [12200, 0, 1100],
  [12200, 0, 2200],
  [12962.5, 0, 0],
  [12962.5, 0, 2200],
  [13725, 0, 0],
  [13725, 0, 1100],
  [13725, 0, 2200],
  [14487.5, 0, 0],
  [14487.5, 0, 2200],
  [15250, 0, 0],
  [15250, 0, 1100],
  [15250, 0, 2200],
  [16012.5, 0, 0],
  [16012.5, 0, 2200],
  [16775, 0, 0],
  [16775, 0, 1100],
  [16775, 0, 2200],
  [17537.5, 0, 0],
  [17537.5, 0, 2200],
  [18300, 0, 0],
  [18300, 0, 1100],
  [18300, 0, 2200],
  [19062.5, 0, 0],
  [19062.5, 0, 2200],
  [19825, 0, 0],
  [19825, 0, 1100],
  [19825, 0, 2200],
  [20587.5, 0, 0],
  [20587.5, 0, 2200],
  [21350, 0, 0],
  [21350, 0, 1100],
  [21350, 0, 2200],
  [0, -700, 0],
  [3050, -700, 0],
  [6100, -700, 0],
  [9150, -700, 0],
  [12200, -700, 0],
  [15250, -700, 0],
  [18300, -700, 0],
  [21350, -700, 0],
  [0, 5000, 0],
  [0, 5000, 1100],
  [0, 5000, 2200],
  [762.5, 5000, 0],
  [762.5, 5000, 2200],
  [1525, 5000, 0],
  [1525, 5000, 1100],
  [1525, 5000, 2200],
  [2287.5, 5000, 0],
  [2287.5, 5000, 2200],
  [3050, 5000, 0],
  [3050, 5000, 1100],
  [3050, 5000, 2200],
  [3812.5, 5000, 0],
  [3812.5, 5000, 2200],
  [4575, 5000, 0],
  [4575, 5000, 1100],
  [4575, 5000, 2200],
  [5337.5, 5000, 0],
  [5337.5, 5000, 2200],
  [6100, 5000, 0],
  [6100, 5000, 1100],
  [6100, 5000, 2200],
  [6862.5, 5000, 0],
  [6862.5, 5000, 2200],
  [7625, 5000, 0],
  [7625, 5000, 1100],
  [7625, 5000, 2200],
  [8387.5, 5000, 0],
  [8387.5, 5000, 1100],
  [8387.5, 5000, 2200],
  [9150, 5000, 0],
  [9150, 5000, 1100],
  [9150, 5000, 2200],
  [9912.5, 5000, 0],
  [9912.5, 5000, 1100],
  [9912.5, 5000, 2200],
  [10675, 5000, 0],
  [10675, 5000, 1100],
  [10675, 5000, 2200],
  [11437.5, 5000, 0],
  [11437.5, 5000, 1100],
  [11437.5, 5000, 2200],
  [12200, 5000, 0],
  [12200, 5000, 1100],
  [12200, 5000, 2200],
  [12962.5, 5000, 0],
  [12962.5, 5000, 1100],
  [12962.5, 5000, 2200],
  [13725, 5000, 0],
  [13725, 5000, 1100],
  [13725, 5000, 2200],
  [14487.5, 5000, 0],
  [14487.5, 5000, 1100],
  [14487.5, 5000, 2200],
  [15250, 5000, 0],
  [15250, 5000, 1100],
  [15250, 5000, 2200],
  [16012.5, 5000, 0],
  [16012.5, 5000, 1100],
  [16012.5, 5000, 2200],
  [16775, 5000, 0],
  [16775, 5000, 1100],
  [16775, 5000, 2200],
  [17537.5, 5000, 0],
  [17537.5, 5000, 1100],
  [17537.5, 5000, 2200],
  [18300, 5000, 0],
  [18300, 5000, 1100],
  [18300, 5000, 2200],
  [19062.5, 5000, 0],
  [19062.5, 5000, 1100],
  [19062.5, 5000, 2200],
  [19825, 5000, 0],
  [19825, 5000, 1100],
  [19825, 5000, 2200],
  [20587.5, 5000, 0],
  [20587.5, 5000, 1100],
  [20587.5, 5000, 2200],
  [21350, 5000, 0],
  [21350, 5000, 1100]
])

# Definir conectividad de los elementos
elementos = np.array([
  [1, 2],
  [2, 3],
  [1, 4],
  [2, 4],
  [2, 5],
  [3, 5],
  [4, 6],
  [4, 7],
  [5, 7],
  [5, 8],
  [6, 7],
  [7, 8],
  [6, 9],
  [7, 9],
  [7, 10],
  [8, 10],
  [9, 11],
  [9, 12],
  [10, 12],
  [10, 13],
  [11, 12],
  [12, 13],
  [12, 13],
  [11, 14],
  [12, 14],
  [12, 15],
  [13, 15],
  [14, 16],
  [14, 17],
  [15, 17],
  [15, 18],
  [16, 17],
  [17, 18],
  [16, 19],
  [17, 19],
  [17, 20],
  [18, 20],
  [19, 21],
  [19, 22],
  [20, 22],
  [20, 23],
  [21, 22],
  [22, 23],
  [21, 24],
  [22, 24],
  [22, 25],
  [23, 25],
  [24, 26],
  [24, 27],
  [25, 27],
  [25, 28],
  [26, 27],
  [27, 28],
  [26, 29],
  [27, 29],
  [27, 30],
  [28, 30],
  [29, 31],
  [29, 32],
  [30, 32],
  [30, 33],
  [31, 32],
  [32, 33],
  [31, 34],
  [32, 34],
  [32, 35],
  [33, 35],
  [34, 36],
  [34, 37],
  [35, 37],
  [35, 38],
  [36, 37],
  [37, 38],
  [36, 39],
  [37, 39],
  [37, 40],
  [38, 40],
  [39, 41],
  [39, 42],
  [40, 42],
  [40, 43],
  [41, 42],
  [42, 43],
  [41, 44],
  [42, 44],
  [42, 45],
  [43, 45],
  [44, 46],
  [44, 47],
  [45, 47],
  [45, 48],
  [46, 47],
  [47, 48],
  [46, 49],
  [47, 49],
  [47, 50],
  [48, 50],
  [49, 51],
  [49, 52],
  [50, 52],
  [50, 53],
  [51, 52],
  [52, 53],
  [51, 54],
  [52, 54],
  [52, 55],
  [53, 55],
  [54, 56],
  [54, 57],
  [55, 57],
  [55, 58],
  [56, 57],
  [57, 58],
  [56, 59],
  [57, 59],
  [57, 60],
  [58, 60],
  [59, 61],
  [59, 62],
  [60, 62],
  [60, 63],
  [61, 62],
  [62, 63],
  [61, 64],
  [62, 64],
  [62, 65],
  [63, 65],
  [64, 66],
  [64, 67],
  [65, 67],
  [65, 68],
  [66, 67],
  [67, 68],
  [66, 69],
  [67, 69],
  [67, 70],
  [68, 70],
  [69, 71],
  [69, 72],
  [70, 72],
  [70, 73],
  [71, 72],
  [72, 73],
  [1, 74],
  [74, 3],
  [11, 75],
  [75, 13],
  [21, 76],
  [76, 23],
  [31, 77],
  [77, 33],
  [41, 78],
  [78, 43],
  [51, 79],
  [79, 53],
  [61, 80],
  [80, 63],
  [71, 81],
  [81, 73],
  [82, 83],
  [83, 84],
  [82, 85],
  [83, 85],
  [83, 86],
  [84, 86],
  [85, 87],
  [85, 88],
  [86, 88],
  [86, 89],
  [87, 88],
  [88, 89],
  [87, 90],
  [88, 90],
  [88, 91],
  [89, 91],
  [90, 92],
  [90, 93],
  [91, 93],
  [91, 94],
  [92, 93],
  [93, 94],
  [92, 95],
  [93, 95],
  [93, 96],
  [94, 96],
  [95, 97],
  [95, 98],
  [96, 98],
  [96, 99],
  [97, 98],
  [98, 99],
  [97, 100],
  [98, 100],
  [98, 101],
  [99, 101],
  [100, 102],
  [100, 103],
  [101, 103],
  [101, 104],
  [102, 103],
  [103, 104],
  [102, 105],
  [103, 105],
  [103, 106],
  [104, 106],
  [105, 107],
  [105, 108],
  [106, 108],
  [106, 109],
  [107, 108],
  [108, 109],
  [107, 110],
  [108, 110],
  [108, 111],
  [109, 111],
  [110, 112],
  [110, 113],
  [111, 113],
  [111, 114],
  [112, 113],
  [113, 114],
  [112, 115],
  [113, 115],
  [113, 116],
  [114, 116],
  [115, 117],
  [115, 118],
  [116, 118],
  [116, 119],
  [117, 118],
  [118, 119],
  [117, 120],
  [118, 120],
  [118, 121],
  [119, 121],
  [120, 122],
  [120, 123],
  [121, 123],
  [121, 124],
  [122, 123],
  [123, 124],
  [122, 125],
  [123, 125],
  [123, 126],
  [124, 126],
  [125, 127],
  [125, 128],
  [126, 128],
  [126, 129],
  [127, 128],
  [128, 129],
  [127, 130],
  [128, 130],
  [128, 131],
  [129, 131],
  [130, 132],
  [130, 133],
  [131, 133],
  [131, 134],
  [132, 133],
  [133, 134],
  [132, 135],
  [133, 135],
  [133, 136],
  [134, 136],
  [135, 137],
  [135, 138],
  [136, 138],
  [136, 139],
  [137, 138],
  [138, 139],
  [137, 140],
  [138, 140],
  [138, 141],
  [139, 141],
  [140, 142],
  [140, 143],
  [141, 143],
  [141, 144],
  [142, 143],
  [143, 144],
  [142, 145],
  [143, 145],
  [143, 146],
  [144, 146],
  [145, 147],
  [145, 148],
  [146, 148],
  [146, 149],
  [147, 148],
  [148, 149],
  [147, 150],
  [148, 150],
  [148, 151],
  [149, 151],
  [150, 152],
  [150, 153],
  [151, 153],
  [151, 154],
  [152, 153],
  [153, 154],
  [82, 155],
  [155, 84],
  [92, 156],
  [156, 94],
  [102, 157],
  [157, 104],
  [112, 158],
  [158, 114],
  [122, 159],
  [159, 124],
  [132, 160],
  [160, 134],
  [142, 161],
  [161, 144],
  [152, 162],
  [162, 154],
  [74, 1],
  [1, 82],
  [82, 155],
  [1, 92],
  [82, 11],
  [75, 11],
  [11, 92],
  [92, 156],
  [11, 102],
  [92, 21],
  [76, 21],
  [21, 102],
  [102, 157],
  [21, 112],
  [102, 31],
  [77, 31],
  [31, 112],
  [112, 158],
  [31, 122],
  [112, 41],
  [78, 41],
  [41, 122],
  [122, 159],
  [41, 132],
  [122, 51],
  [79, 51],
  [51, 132],
  [132, 160],
  [51, 142],
  [132, 61],
  [80, 61],
  [61, 142],
  [142, 161],
  [61, 152],
  [142, 71],
  [81, 71],
  [71, 152],
  [152, 162]
]);

#Número de nodos y elementos
num_nodos = nodos.length;
num_elementos = elementos.length;

# Grados de libertad por nodo (6 en 3D: 3 traslaciones y 3 rotaciones)
gdl_por_nodo = 6;
num_gdl = num_nodos * gdl_por_nodo;

# Inicializar la matriz de rigidez global y el vector de fuerzas
K = np.zeros((num_gdl, num_gdl))
F = np.zeros(num_gdl)

# Definir fuerzas aplicadas (en Newtons y N·m) 
F.set([5], -1000); // Momento en el nodo 1, dirección z

// Definir restricciones (1 = fijo, 0 = libre)
const restricciones = [
  [1, 1, 1, 1, 1, 1], // Nodo 1 fijo en x, y, z, rotx, roty, rotz
  [0, 0, 0, 0, 0, 0], // Nodo 2 libre
  [0, 0, 0, 0, 0, 0], // Nodo 3 libre
  [0, 0, 0, 0, 0, 0], // Nodo 4 libre
];

// Ensamblar la matriz de rigidez global
for (let i = 0; i < num_elementos; i++) {
  // Nodos del elemento
  const nodo1 = elementos[i][0];
  const nodo2 = elementos[i][1];

  // Coordenadas de los nodos
  const x1 = nodos[nodo1 - 1][0];
  const y1 = nodos[nodo1 - 1][1];
  const z1 = nodos[nodo1 - 1][2];
  const x2 = nodos[nodo2 - 1][0];
  const y2 = nodos[nodo2 - 1][1];
  const z2 = nodos[nodo2 - 1][2];

  // Longitud del elemento
  const L = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2);

  // Cosenos directores
  const cx = (x2 - x1) / L;
  const cy = (y2 - y1) / L;
  const cz = (z2 - z1) / L;

  // Matriz de transformación de coordenadas (T)
  const T = math.matrix([
    [cx, cy, cz, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [-cy, cx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [-cz, 0, cx, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, cx, cy, cz, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -cy, cx, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -cz, 0, cx, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, cx, cy, cz, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, -cy, cx, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, -cz, 0, cx, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, cx, cy, cz],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, -cy, cx, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, -cz, 0, cx],
  ]);

  // Matriz de rigidez local (12x12 para elementos de marco)
  const k_local = math.matrix([
    [E * A / L, 0, 0, 0, 0, 0, -E * A / L, 0, 0, 0, 0, 0],
    [0, 12 * E * Izz / L ** 3, 0, 0, 0, 6 * E * Izz / L ** 2, 0, -12 * E * Izz / L ** 3, 0, 0, 0, 6 * E * Izz / L ** 2],
    [0, 0, 12 * E * Iyy / L ** 3, 0, -6 * E * Iyy / L ** 2, 0, 0, 0, -12 * E * Iyy / L ** 3, 0, -6 * E * Iyy / L ** 2, 0],
    [0, 0, 0, G * J / L, 0, 0, 0, 0, 0, -G * J / L, 0, 0],
    [0, 0, -6 * E * Iyy / L ** 2, 0, 4 * E * Iyy / L, 0, 0, 0, 6 * E * Iyy / L ** 2, 0, 2 * E * Iyy / L, 0],
    [0, 6 * E * Izz / L ** 2, 0, 0, 0, 4 * E * Izz / L, 0, -6 * E * Izz / L ** 2, 0, 0, 0, 2 * E * Izz / L],
    [-E * A / L, 0, 0, 0, 0, 0, E * A / L, 0, 0, 0, 0, 0],
    [0, -12 * E * Izz / L ** 3, 0, 0, 0, -6 * E * Izz / L ** 2, 0, 12 * E * Izz / L ** 3, 0, 0, 0, -6 * E * Izz / L ** 2],
    [0, 0, -12 * E * Iyy / L ** 3, 0, 6 * E * Iyy / L ** 2, 0, 0, 0, 12 * E * Iyy / L ** 3, 0, 6 * E * Iyy / L ** 2, 0],
    [0, 0, 0, -G * J / L, 0, 0, 0, 0, 0, G * J / L, 0, 0],
    [0, 0, -6 * E * Iyy / L ** 2, 0, 2 * E * Iyy / L, 0, 0, 0, 6 * E * Iyy / L ** 2, 0, 4 * E * Iyy / L, 0],
    [0, 6 * E * Izz / L ** 2, 0, 0, 0, 2 * E * Izz / L, 0, -6 * E * Izz / L ** 2, 0, 0, 0, 4 * E * Izz / L],
  ]);

  const k_global = math.multiply(math.multiply(math.transpose(T), k_local), T);

  // Grados de libertad globales del elemento
  const gdl_elemento = [
    (nodo1 - 1) * gdl_por_nodo + 1, (nodo1 - 1) * gdl_por_nodo + 2, (nodo1 - 1) * gdl_por_nodo + 3,
    (nodo1 - 1) * gdl_por_nodo + 4, (nodo1 - 1) * gdl_por_nodo + 5, (nodo1 - 1) * gdl_por_nodo + 6,
    (nodo2 - 1) * gdl_por_nodo + 1, (nodo2 - 1) * gdl_por_nodo + 2, (nodo2 - 1) * gdl_por_nodo + 3,
    (nodo2 - 1) * gdl_por_nodo + 4, (nodo2 - 1) * gdl_por_nodo + 5, (nodo2 - 1) * gdl_por_nodo + 6
  ];

  // Ensamblar en la matriz global
  for (let row = 0; row < 12; row++) {
    for (let col = 0; col < 12; col++) {
      K.set([gdl_elemento[row] - 1, gdl_elemento[col] - 1], K.get([gdl_elemento[row] - 1, gdl_elemento[col] - 1]) + k_global.get([row, col]));
    }
  }
}

// Aplicar restricciones
let gdl_fijos = [];
for (let i = 0; i < num_nodos; i++) {
  for (let j = 0; j < gdl_por_nodo; j++) {
    if (restricciones[i][j] === 1) {
      gdl_fijos.push(i * gdl_por_nodo + j);
    }
  }
}

// Eliminar filas y columnas correspondientes a grados de libertad fijos
gdl_fijos.sort((a, b) => b - a); // Ordenar de mayor a menor para eliminar correctamente
gdl_fijos.forEach(gdl => {
  K = math.subset(K, math.index(math.range(0, K.size()[0]), math.range(0, K.size()[1])), math.remove(K, math.index(gdl, math.range(0, K.size()[1]))));
  K = math.subset(K, math.index(math.range(0, K.size()[0]), math.range(0, K.size()[1])), math.remove(K, math.index(math.range(0, K.size()[0]), gdl)));
  F = math.subset(F, math.index(math.range(0, F.size()[0])), math.remove(F, math.index(gdl)));
});

// Resolver el sistema de ecuaciones para los desplazamientos
const U = math.lusolve(K, F);

// Añadir desplazamientos fijos (ceros) a la solución
let U_completo = math.zeros(num_gdl, 1);
let index = 0;
for (let i = 0; i < num_gdl; i++) {
  if (!gdl_fijos.includes(i)) {
    U_completo.set([i], U[index][0]);
    index++;
  }
}

// Guardar matrices en archivo CSV
const guardarMatrizCSV = (nombreArchivo, matriz) => {
  const csvContent = matriz.map(row => row.join(',')).join('\n');
  fs.writeFileSync(nombreArchivo, csvContent);
};

// Guardar matriz de rigidez global
guardarMatrizCSV('/home/aron/Aron/08_TesisUnsaac/matriz_rigidez_global.csv', K.toArray());

// Guardar vector de fuerzas
guardarMatrizCSV('/home/aron/Aron/08_TesisUnsaac/vector_fuerzas.csv', F.toArray());

// Guardar desplazamientos
guardarMatrizCSV('/home/aron/Aron/08_TesisUnsaac/desplazamientos.csv', U_completo.toArray());

console.log('Matrices guardadas en archivos CSV.');

